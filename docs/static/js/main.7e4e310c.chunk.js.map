{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GipExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","oldValue","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","loading","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","state","setstate","useEffect","then","imgs","useFetchGifs","key","GipExpertApp","categories","c","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAchD,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAeP,GAAf,mBAA8BO,OAC5CN,EAAc,OAMd,2BACEO,KAAK,OACLC,MAAOT,EACPU,SAjBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,YCJdG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACvC,OACE,yBAAKC,UAAU,0CACb,yBAAKC,IAAKF,EAAKG,IAAKJ,EAAOK,QAAQ,SACnC,2BAAIL,K,uBCNGM,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACN,mCACTP,EAFe,uDACN,mCADM,cAEmDQ,UACtEF,GAHmB,sBAKFG,MAAMT,GALJ,cAKfU,EALe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLjB,GAAIiB,EAAIjB,GACRC,MAAOgB,EAAIhB,MACXC,IAAG,UAAEe,EAAIC,cAAN,aAAE,EAAYC,iBAAiBjB,QAZjB,kBAgBda,GAhBc,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdtB,mBAAS,CACjC4B,KAAM,GACNR,SAAS,IAH6B,mBACjCe,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRhB,EAAQC,GAAUgB,MAAK,SAACC,GACtBH,EAAS,CACPR,KAAMW,EACNnB,SAAS,SAGZ,CAACE,IAEGa,EDXyBK,CAAalB,GAAhCU,EAF0B,EAEhCJ,KAAcR,EAFkB,EAElBA,QACrB,OACE,oCACE,wBAAIH,UAAU,qCAAqCK,GACjDF,GAAW,uBAAGH,UAAU,mCAAb,cACb,yBAAKA,UAAU,aACZe,EAAOF,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAaU,IAAKV,EAAIjB,IAAQiB,UEOzBW,EAhBM,WAAO,IAAD,EACW1C,mBAAS,CAAC,cADrB,mBAClB2C,EADkB,KACN5C,EADM,KAGzB,OACE,6BACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,4BACG4C,EAAWb,KAAI,SAACc,GAAD,OACd,kBAAC,EAAD,CAASH,IAAKG,EAAGtB,SAAUsB,U,MCPrCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,U","file":"static/js/main.7e4e310c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((oldValue) => [inputValue, ...oldValue]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      ></input>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} loading=\"lazy\"></img>\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","export const getGifs = async (category) => {\r\n  const apiKey = \"aKsCpvQ3BGahHkYlBg0Hio2kPXNBdmu7\";\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${encodeURI(\r\n    category\r\n  )}&limit=10`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React from 'react';\r\nimport { GifGridItem } from \"./GifGridItem\";\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  const {data: images, loading} = useFetchGifs(category)\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n      { loading && <p className=\"animate__animated animate_flash\">Loading...</p> }\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img}></GifGridItem>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setstate({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GipExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>GipExpertApp</h2>\r\n      <AddCategory setCategories={setCategories}></AddCategory>\r\n      <ol>\r\n        {categories.map((c) => (\r\n          <GifGrid key={c} category={c}></GifGrid>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GipExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GipExpertApp from './GipExpertApp';\nimport \"./index.css\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GipExpertApp>\n    </GipExpertApp>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}